//------------------------------------------------------------------------------
// <auto-generated>
//     This code was auto-generated by com.unity.inputsystem:InputActionCodeGenerator
//     version 1.5.1
//     from Assets/Social/Members/Mythic/Mythic_Input.inputactions
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.Collections;
using System.Collections.Generic;
using UnityEngine.InputSystem;
using UnityEngine.InputSystem.Utilities;

namespace Mythic
{
    public partial class @Mythic_Input: IInputActionCollection2, IDisposable
    {
        public InputActionAsset asset { get; }
        public @Mythic_Input()
        {
            asset = InputActionAsset.FromJson(@"{
    ""name"": ""Mythic_Input"",
    ""maps"": [
        {
            ""name"": ""FarmingInSpace"",
            ""id"": ""6c05afdd-40c2-4c7c-b516-83c8fdcfa02f"",
            ""actions"": [
                {
                    ""name"": ""Interact"",
                    ""type"": ""Button"",
                    ""id"": ""b0de0e88-e27c-4119-b2a9-a409c858bfec"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                }
            ],
            ""bindings"": [
                {
                    ""name"": """",
                    ""id"": ""d74c020a-130c-4303-b8c6-a5fc1fdd7d68"",
                    ""path"": ""<Mouse>/leftButton"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Interact"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                }
            ]
        }
    ],
    ""controlSchemes"": []
}");
            // FarmingInSpace
            m_FarmingInSpace = asset.FindActionMap("FarmingInSpace", throwIfNotFound: true);
            m_FarmingInSpace_Interact = m_FarmingInSpace.FindAction("Interact", throwIfNotFound: true);
        }

        public void Dispose()
        {
            UnityEngine.Object.Destroy(asset);
        }

        public InputBinding? bindingMask
        {
            get => asset.bindingMask;
            set => asset.bindingMask = value;
        }

        public ReadOnlyArray<InputDevice>? devices
        {
            get => asset.devices;
            set => asset.devices = value;
        }

        public ReadOnlyArray<InputControlScheme> controlSchemes => asset.controlSchemes;

        public bool Contains(InputAction action)
        {
            return asset.Contains(action);
        }

        public IEnumerator<InputAction> GetEnumerator()
        {
            return asset.GetEnumerator();
        }

        IEnumerator IEnumerable.GetEnumerator()
        {
            return GetEnumerator();
        }

        public void Enable()
        {
            asset.Enable();
        }

        public void Disable()
        {
            asset.Disable();
        }

        public IEnumerable<InputBinding> bindings => asset.bindings;

        public InputAction FindAction(string actionNameOrId, bool throwIfNotFound = false)
        {
            return asset.FindAction(actionNameOrId, throwIfNotFound);
        }

        public int FindBinding(InputBinding bindingMask, out InputAction action)
        {
            return asset.FindBinding(bindingMask, out action);
        }

        // FarmingInSpace
        private readonly InputActionMap m_FarmingInSpace;
        private List<IFarmingInSpaceActions> m_FarmingInSpaceActionsCallbackInterfaces = new List<IFarmingInSpaceActions>();
        private readonly InputAction m_FarmingInSpace_Interact;
        public struct FarmingInSpaceActions
        {
            private @Mythic_Input m_Wrapper;
            public FarmingInSpaceActions(@Mythic_Input wrapper) { m_Wrapper = wrapper; }
            public InputAction @Interact => m_Wrapper.m_FarmingInSpace_Interact;
            public InputActionMap Get() { return m_Wrapper.m_FarmingInSpace; }
            public void Enable() { Get().Enable(); }
            public void Disable() { Get().Disable(); }
            public bool enabled => Get().enabled;
            public static implicit operator InputActionMap(FarmingInSpaceActions set) { return set.Get(); }
            public void AddCallbacks(IFarmingInSpaceActions instance)
            {
                if (instance == null || m_Wrapper.m_FarmingInSpaceActionsCallbackInterfaces.Contains(instance)) return;
                m_Wrapper.m_FarmingInSpaceActionsCallbackInterfaces.Add(instance);
                @Interact.started += instance.OnInteract;
                @Interact.performed += instance.OnInteract;
                @Interact.canceled += instance.OnInteract;
            }

            private void UnregisterCallbacks(IFarmingInSpaceActions instance)
            {
                @Interact.started -= instance.OnInteract;
                @Interact.performed -= instance.OnInteract;
                @Interact.canceled -= instance.OnInteract;
            }

            public void RemoveCallbacks(IFarmingInSpaceActions instance)
            {
                if (m_Wrapper.m_FarmingInSpaceActionsCallbackInterfaces.Remove(instance))
                    UnregisterCallbacks(instance);
            }

            public void SetCallbacks(IFarmingInSpaceActions instance)
            {
                foreach (var item in m_Wrapper.m_FarmingInSpaceActionsCallbackInterfaces)
                    UnregisterCallbacks(item);
                m_Wrapper.m_FarmingInSpaceActionsCallbackInterfaces.Clear();
                AddCallbacks(instance);
            }
        }
        public FarmingInSpaceActions @FarmingInSpace => new FarmingInSpaceActions(this);
        public interface IFarmingInSpaceActions
        {
            void OnInteract(InputAction.CallbackContext context);
        }
    }
}
